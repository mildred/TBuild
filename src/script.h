/*
**
** Main TBuild Tcl script
**
** *****
**
** Copyright (c) 2008 Mildred Ki'Lya <mildred593(at)online.fr>
**
** Permission is hereby granted, free of charge, to any person
** obtaining a copy of this software and associated documentation
** files (the "Software"), to deal in the Software without
** restriction, including without limitation the rights to use,
** copy, modify, merge, publish, distribute, sublicense, and/or sell
** copies of the Software, and to permit persons to whom the
** Software is furnished to do so, subject to the following
** conditions:
**
** The above copyright notice and this permission notice shall be
** included in all copies or substantial portions of the Software.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
** OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
** NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
** HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
** WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
** FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
** OTHER DEALINGS IN THE SOFTWARE.
*/

static const char* script = "#!/usr/bin/env tclsh\n"
"# kate: hl Tcl/Tk;\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"#!/usr/bin/env tclsh\n"
"\n"
"package provide TBuild 0.1\n"
"\n"
"namespace eval TBuild {\n"
"\n"
"  variable interp {}\n"
"\n"
"  variable top_target_dir [pwd]\n"
"  variable top_source_dir $top_target_dir\n"
"  variable current_dir \"\"\n"
"\n"
"  variable search_source $top_source_dir\n"
"  variable locate_source $top_target_dir\n"
"  variable locate_target $top_target_dir\n"
"\n"
"  variable targets	\"\"\n"
"    # <target> var <varname>	variable value\n"
"    # <target> dep		list of dependancies\n"
"    # <target> inc		list of include dependancies\n"
"    # <target> make		function to call to generate target followed by\n"
"    #				the list of targets to pass as arguments\n"
"    # <target> var search	search path (list)\n"
"    # <target> var locate	locate path\n"
"    # <target> flags		flags\n"
"  variable variables	\"\"\n"
"    # global variables\n"
"\n"
"  proc UpdateVariables {} {\n"
"\n"
"    variable top_target_dir\n"
"    variable top_source_dir\n"
"    variable current_dir\n"
"    variable search_source\n"
"    variable locate_source\n"
"    variable locate_target\n"
"\n"
"    set search_source [file join $top_source_dir {*}$current_dir]\n"
"    set locate_source [file join $top_target_dir {*}$current_dir]\n"
"    set locate_target [file join $top_target_dir {*}$current_dir]\n"
"\n"
"  }\n"
"\n"
"  proc Include {args} {\n"
"\n"
"    variable interp\n"
"    variable current_dir\n"
"    variable top_source_dir\n"
"\n"
"    set old_current_dir $current_dir\n"
"    set current_dir [concat $current_dir $args]\n"
"    UpdateVariables\n"
"    set buildfile [file join $top_source_dir {*}$current_dir \"TBuildfile.tcl\"]\n"
"    interp eval $interp source $buildfile\n"
"    set current_dir $old_current_dir\n"
"\n"
"  }\n"
"\n"
"#   # Declare a sub directory\n"
"#   proc SubDir {varname args} {\n"
"#\n"
"#     variable current_dir\n"
"#     variable search_source\n"
"#     variable locate_source\n"
"#     variable locate_target\n"
"#\n"
"#     upvar $varname TOP\n"
"#     if { ! [info exists TOP] } then {\n"
"#       set TOP [pwd]\n"
"#       foreach dir $args {\n"
"# 	set TOP [file dirname $TOP]\n"
"#       }\n"
"#     }\n"
"#     set curdir $TOP\n"
"#     foreach dir $args {\n"
"#       set curdir [file join $curdir $dir]\n"
"#     }\n"
"#\n"
"#     #puts \"TOP    = $TOP\"\n"
"#     #puts \"SRCDIR = $curdir\"\n"
"#\n"
"#     set current_dir $curdir\n"
"#     dict set search_source $current_dir $curdir\n"
"#     dict set locate_source $current_dir $curdir\n"
"#     dict set locate_target $current_dir $curdir\n"
"#\n"
"#   }\n"
"#\n"
"#   # Include a sub directory\n"
"#   proc SubInc {varname args} {\n"
"#\n"
"#     variable current_dir\n"
"#\n"
"#     upvar $varname TOP\n"
"#     set subdir $TOP\n"
"#     foreach dir $args {\n"
"#       set subdir [file join $subdir $dir]\n"
"#     }\n"
"#     set subfile [file join $subdir \"TBuildfile.tcl\"]\n"
"#\n"
"#     set mydir $current_dir\n"
"#     source $subfile\n"
"#     set current_dir $mydir\n"
"#\n"
"#   }\n"
"\n"
"  # Similar to the adding of grist in Jam\n"
"  proc MakeGlobal {args} {\n"
"    variable current_dir\n"
"    foreach varname $args {\n"
"      upvar $varname sourcevar\n"
"      set sourcevar [list $current_dir $sourcevar]\n"
"    }\n"
"  }\n"
"\n"
"  proc FindSource {args} {\n"
"    variable targets\n"
"    variable search_source\n"
"    variable locate_source\n"
"    variable current_dir\n"
"    foreach arg $args {\n"
"      dict set targets $arg var search [list $search_source]\n"
"      dict set targets $arg var locate $locate_source\n"
"    }\n"
"  }\n"
"\n"
"  proc FindTarget {args} {\n"
"    variable targets\n"
"    variable current_dir\n"
"    variable locate_target\n"
"    variable current_dir\n"
"    foreach arg $args {\n"
"      # place in $locate_target\n"
"      dict set targets $arg var search [list $locate_target]\n"
"      dict set targets $arg var locate $locate_target\n"
"    }\n"
"  }\n"
"\n"
"  proc MakeSource {args} {\n"
"    foreach arg $args {\n"
"      upvar $arg var\n"
"      MakeGlobal var\n"
"      FindSource $var\n"
"    }\n"
"  }\n"
"\n"
"  proc MakeTarget {args} {\n"
"    foreach arg $args {\n"
"      upvar $arg var\n"
"      MakeGlobal var\n"
"      FindTarget $var\n"
"    }\n"
"  }\n"
"\n"
"  proc MakeNotFile {args} {\n"
"    variable targets\n"
"    foreach arg $args {\n"
"      upvar $arg var\n"
"      set var [list {} $var]\n"
"      SetFlag $var NotFile\n"
"    }\n"
"  }\n"
"\n"
"  proc Source {t} {\n"
"    MakeSource t\n"
"    return $t\n"
"  }\n"
"\n"
"  proc Target {t} {\n"
"    MakeTarget t\n"
"    return $t\n"
"  }\n"
"\n"
"  proc NotFile {t} {\n"
"    MakeNotFile t\n"
"    return $t\n"
"  }\n"
"\n"
"  proc Depends {target args} {\n"
"    variable targets\n"
"    if [dict exists $targets $target dep] {\n"
"      set dep [dict get $targets $target dep]\n"
"    } else {\n"
"      set dep \"\"\n"
"    }\n"
"    dict set targets $target dep [concat $dep $args]\n"
"  }\n"
"\n"
"  proc DependsInc {target args} {\n"
"    variable targets\n"
"    set inc [dict get $targets $target inc]\n"
"    dict set targets $target inc [concat $inc $args]\n"
"  }\n"
"\n"
"  proc Make {procname target args} {\n"
"    variable targets\n"
"    dict set targets $target make [concat $procname $args]\n"
"  }\n"
"\n"
"  proc Exists {a args} {\n"
"    # ?target? var\n"
"    variable targets\n"
"    variable variables\n"
"    if [llength $args] {\n"
"      return [dict exists $targets $a var [lindex 0 $args]]\n"
"    } else {\n"
"      return [dict exists $variables $a]\n"
"    }\n"
"  }\n"
"\n"
"  proc Get {a args} {\n"
"    # ?target? var\n"
"    variable targets\n"
"    variable variables\n"
"    if [llength $args] {\n"
"      set b [lindex $args 0]\n"
"      if [dict exists $targets $a var $b] {\n"
"	return [dict get $targets $a var $b]\n"
"      } else {\n"
"	return [dict get $variables $b]\n"
"      }\n"
"    } else {\n"
"      return [dict get $variables $a]\n"
"    }\n"
"  }\n"
"\n"
"  proc Set {a b args} {\n"
"    # ?target? var val\n"
"    variable targets\n"
"    variable variables\n"
"    if [llength $args] {\n"
"      return [dict set targets $a var $b [lindex 0 $args]]\n"
"    } else {\n"
"      return [dict set variables $a $b]\n"
"    }\n"
"  }\n"
"\n"
"  proc Unset {a args} {\n"
"    # ?target? var\n"
"    variable targets\n"
"    variable variables\n"
"    if [llength $args] {\n"
"      return [dict unset targets $a var $b]\n"
"    } else {\n"
"      return [dict unset variables $a]\n"
"    }\n"
"  }\n"
"\n"
"  proc Flags {target} {\n"
"    variable targets\n"
"    if {! [dict exists $targets $target flags] } {\n"
"      return {}\n"
"    } else {\n"
"      return [dict get $targets $target flags]\n"
"    }\n"
"  }\n"
"\n"
"  proc HasFlag {target flag} {\n"
"    variable targets\n"
"    if {! [dict exists $targets $target flags] } {\n"
"      return false\n"
"    } elseif {[lsearch -exact [dict get $targets $target flags] $flag] != -1} {\n"
"      return true\n"
"    } else {\n"
"      return false\n"
"    }\n"
"  }\n"
"\n"
"  proc SetFlag {target flag} {\n"
"    variable targets\n"
"    if {! [dict exists $targets $target flags] } {\n"
"      dict set targets $target flags [list flag]\n"
"    } else {\n"
"      set flags [dict get $targets $target flags]\n"
"      lappend flags $flag\n"
"      dict set targets $target flags $flags\n"
"    }\n"
"  }\n"
"\n"
"  proc UnsetFlag {target flag} {\n"
"    variable targets\n"
"    if {! [dict exists $targets $target flags] } {\n"
"      dict set targets $target flags {}\n"
"    } else {\n"
"      set flags [dict get $targets $target flags]\n"
"      set new_flags \"\"\n"
"      for i [lsearch -exact -all -not $flags $flag] {\n"
"	lappend new_flags [lindex $flags $i]\n"
"      }\n"
"      dict set targets $target flags $new_flags\n"
"    }\n"
"  }\n"
"\n"
"  proc Require {pkg} {\n"
"    package require TBuild::$pkg\n"
"    namespace export $pkg\n"
"  }\n"
"\n"
"  proc FileSearch {target} {\n"
"    # TODO: add cache\n"
"    variable targets\n"
"    variable top_source_dir\n"
"    set grist  [lindex $target 0]\n"
"    set name   [lindex $target 1]\n"
"    if [dict exists $targets $target var search] {\n"
"      set search [dict get $targets $target var search]\n"
"      foreach s $search {\n"
"	set f [file join $s $name]\n"
"	if [file exists $f] {\n"
"	  return $f\n"
"	}\n"
"      }\n"
"    }\n"
"    return [file join $top_source_dir {*}$grist $name]\n"
"  }\n"
"\n"
"  proc FileLocate {target} {\n"
"    # TODO: add cache\n"
"    variable targets\n"
"    variable top_target_dir\n"
"    set grist  [lindex $target 0]\n"
"    set name   [lindex $target 1]\n"
"    if [dict exists $targets $target var locate] {\n"
"      set locate [dict get $targets $target var locate]\n"
"      return [file join $locate $name]\n"
"    } else {\n"
"      return [file join $top_target_dir {*}$grist $name]\n"
"    }\n"
"  }\n"
"\n"
"  proc Aliases {{prefix {TBuild}}} {\n"
"    set res \"\"\n"
"    set all_functions {Include MakeGlobal FindSource FindTarget MakeSource \\\n"
"      MakeTarget MakeNotFile Source Target NotFile Depends DependsInc \\\n"
"      FileSearch FileLocate}\n"
"    # not exported:\n"
"    foreach func $all_functions {\n"
"      lappend res $func [list {*}$prefix $func]\n"
"    }\n"
"    return $res\n"
"  }\n"
"\n"
"  namespace export Include MakeGlobal FindSource FindTarget MakeSource \\\n"
"    MakeTarget MakeNotFile Source Target NotFile Depends DependsInc Make \\\n"
"    Exists Get Set Unset Require FileSearch FileLocate Aliases\n"
"  namespace ensemble create\n"
"\n"
"}\n"
"\n"
"namespace eval TBuild::execute {\n"
"\n"
"    # targets:\n"
"    #\n"
"    # <target> var <varname>	variable value\n"
"    # <target> dep		list of dependancies\n"
"    # <target> inc		list of include dependancies\n"
"    # <target> make		function to call to generate target followed by\n"
"    #				the list of targets to pass as arguments\n"
"    # <target> var search	search path (list)\n"
"    # <target> var locate	locate path\n"
"    # <target> flags		flags\n"
"    #\n"
"\n"
"  proc run {choosen_targets} {\n"
"    namespace upvar [namespace parent] targets targets\n"
"    #puts \"Build targets: $choosen_targets\"\n"
"    foreach tname $choosen_targets {\n"
"      set found [find_targets $tname]\n"
"      if [dict exists $targets $tname] {\n"
"	puts \"Build target $tname\"\n"
"	run_target $tname\n"
"      } elseif { [llength $found] == 0 } {\n"
"	puts \"Can\'t find targets for $tname\"\n"
"      }\n"
"      foreach t $found {\n"
"	puts \"Build target $t\"\n"
"	run_target $t\n"
"      }\n"
"    }\n"
"  }\n"
"\n"
"  proc find_targets {name} {\n"
"    namespace upvar [namespace parent] targets targets\n"
"    set possible_targets \"\"\n"
"    set min false\n"
"    set res \"\"\n"
"    dict for {target _} $targets {\n"
"      if { [lindex $target 1] == $name } {\n"
"	lappend possible_targets $target\n"
"	set len [llength [lindex $target 0]]\n"
"	if { $min == false || $min > $len } {\n"
"	  set min $len\n"
"	}\n"
"      }\n"
"    }\n"
"    foreach target $possible_targets {\n"
"      set len [llength [lindex $target 0]]\n"
"      if { $len == $min } {\n"
"	lappend res $target\n"
"      }\n"
"    }\n"
"    return $res\n"
"  }\n"
"\n"
"  proc run_target {target} {\n"
"    namespace upvar [namespace parent] targets targets\n"
"    set tfile [[namespace parent]::FileLocate $target]\n"
"    set mtime 0\n"
"    set rebuild true\n"
"    if [file exists $tfile] {\n"
"      set mtime [file mtime $tfile]\n"
"      set rebuild false\n"
"    }\n"
"    # Run dependancies\n"
"    foreach dep [dependancies $target] {\n"
"      run_target $dep\n"
"      set f [[namespace parent]::FileSearch $dep]\n"
"      if { ! [file exists $f] } {\n"
"	set rebuild true\n"
"      } elseif { [file mtime $f] > $mtime } {\n"
"	set rebuild true\n"
"      }\n"
"    }\n"
"    # Run target in itself\n"
"    if { $rebuild && [dict exists $targets $target make] } {\n"
"      set func  [lindex [dict get $targets $target make] 0]\n"
"      set targs [list $target]\n"
"      lappend targs {*}[lrange [dict get $targets $target make] 1 end]\n"
"      set fargs [list]\n"
"      puts [list $func $target]\n"
"      foreach targ $targs {\n"
"	set f [[namespace parent]::FileSearch $targ]\n"
"	lappend fargs $f\n"
"	puts \"[string repeat \" \" [string length $func]] $f\"\n"
"      }\n"
"      $func $target {*}$fargs\n"
"    }\n"
"    return true\n"
"  }\n"
"\n"
"  proc dependancies {target} {\n"
"    namespace upvar [namespace parent] targets targets\n"
"    set deps [list]\n"
"    if [dict exists $targets $target dep] {\n"
"      foreach dep [dict get $targets $target dep] {\n"
"	lappend deps $dep\n"
"	if [dict exists $targets $dep inc] {\n"
"	  set deps [concat $deps [dict get $targets $dep inc]]\n"
"	}\n"
"      }\n"
"    }\n"
"    return $deps\n"
"  }\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"TBuild::NotFile all\n"
"\n"
"\n"
"# #######################################################\n"
"#\n"
"#                     Parse arguments\n"
"#\n"
"# #######################################################\n"
"\n"
"set tbuildfile \"TBuildfile.tcl\"\n"
"set targets \"\"\n"
"\n"
"set i 0\n"
"while {$i < $argc} {\n"
"  set arg [lindex $argv $i]\n"
"  switch -regexp -- $arg {\n"
"    ^(-h|-help|--help)$ {\n"
"      set build [file tail $argv0]\n"
"      puts \"NAME\"\n"
"      puts \"\"\n"
"      puts \"    $build - Build system\"\n"
"      puts \"\"\n"
"      puts \"SYNOPSYS\"\n"
"      puts \"\"\n"
"      puts \"    $build \\[ -f buildfile \\] \\[ options \\] ... \\[ targets \\] ...\"\n"
"      puts \"\"\n"
"      exit\n"
"    }\n"
"    ^(-f|--file)$ {\n"
"      incr i\n"
"      if {$i < $argc} {\n"
"	set tbuildfile [file normalize [lindex $argv $i]]\n"
"	set TBuild::top_source_dir [file dirname $tbuildfile]\n"
"	TBuild::UpdateVariables\n"
"      } else {\n"
"	puts \"Missing argument to -f, --file\"\n"
"      }\n"
"    }\n"
"    ^(-j)$ {\n"
"      incr i\n"
"      if {$i < $argc} {\n"
"	set TBuild::execute::maxjobs [lindex $argv $i]\n"
"      } else {\n"
"	puts \"Missing argument to -j\"\n"
"      }\n"
"    }\n"
"    ^[a-zA-z0-9_]+= {\n"
"      regexp \"^([a-zA-z0-9_])+=(.*)$\" $arg varname varval\n"
"      TBuild Set $varname $varval\n"
"    }\n"
"    default {\n"
"      set targets [linsert $targets end $arg]\n"
"    }\n"
"  }\n"
"  incr i\n"
"}\n"
"\n"
"if {$targets == \"\"} {\n"
"  set targets all\n"
"}\n"
"#puts \"Building targets: $targets\"\n"
"\n"
"\n"
"\n"
"# ##########################################################\n"
"#\n"
"#                     Create Interpreter\n"
"#\n"
"# ##########################################################\n"
"\n"
"\n"
"set i [interp create -safe]\n"
"set TBuild::interp $i\n"
"interp alias  $i TBuild {} TBuild\n"
"interp expose $i source\n"
"interp expose $i pwd\n"
"interp hide   $i package\n"
"interp share  {} stdout $i\n"
"interp eval   $i {\n"
"  proc Alias {new args} {\n"
"    proc $new {args} \"\n"
"      #[list puts $args]\n"
"      #puts \\$args\n"
"      [concat $args {{*}$args}]\n"
"    \"\n"
"    return $new\n"
"  }\n"
"  #proc log {args} {\n"
"  #  foreach a $args {\n"
"  #    puts $a\n"
"  #  }\n"
"  #}\n"
"  proc Aliases {args} {\n"
"    set res {}\n"
"    set i 0\n"
"    set max [llength $args]\n"
"    if { $max == 1 } {\n"
"      set args {*}$args\n"
"      set max [llength $args]\n"
"    }\n"
"    while { $i+1 < $max } {\n"
"      set new [lindex $args $i]\n"
"      incr i\n"
"      set old [lindex $args $i]\n"
"      incr i\n"
"      #puts \"Alias $new $old\"\n"
"      lappend res [Alias $new {*}$old]\n"
"    }\n"
"    return $res\n"
"  }\n"
"}\n"
"interp eval   $i source $tbuildfile\n"
"\n"
"#puts $TBuild::targets\n"
"\n"
"TBuild::execute::run $targets\n"
"\n"
"exit\n"
"";

/*
** kate: hl C; indent-width 4; space-indent on; replace-tabs off;
** kate: tab-width 8; remove-trailing-space on; indent-mode cstyle;
*/
